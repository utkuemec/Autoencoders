# -*- coding: utf-8 -*-
"""COMP257_Assignment5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_BkrC0VfZcU5LdNXh0E69pp47_PFIkuc
"""

import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.layers import Input, Dense
from tensorflow.keras.models import Model
from tensorflow.keras.regularizers import l1
from tensorflow.keras.optimizers import Adam
from sklearn.model_selection import KFold
from sklearn.datasets import fetch_olivetti_faces
from sklearn.model_selection import train_test_split
from sklearn.decomposition import PCA
from sklearn.metrics import mean_squared_error

data = fetch_olivetti_faces()
X, y = data.data, data.target

X_temp, X_test, y_temp, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)
X_train, X_val, y_train, y_val = train_test_split(X_temp, y_temp, test_size=0.25, stratify=y_temp, random_state=42)

def build_autoencoder(input_shape, encoding_dim=120, regularizer_rate=1e-4):
    input_img = Input(shape=(input_shape,))

    encoded = Dense(encoding_dim, activation='relu',
                    activity_regularizer=l1(regularizer_rate))(input_img)

    decoded = Dense(input_shape, activation='sigmoid')(encoded)

    autoencoder = Model(input_img, decoded)
    autoencoder.compile(optimizer=Adam(), loss='binary_crossentropy')
    return autoencoder

pca = PCA(n_components=0.99)
X_train_pca = pca.fit_transform(X_train)
X_val_pca = pca.transform(X_val)
X_test_pca = pca.transform(X_test)

kf = KFold(n_splits=5, random_state=42, shuffle=True)

encodings_dims = [64, 128, 256]
regularizer_rates = [1e-3, 1e-4, 1e-5]

best_score = np.inf
best_params = {}

for encoding_dim in encodings_dims:
    for regularizer_rate in regularizer_rates:
        fold_scores = []
        for train_index, val_index in kf.split(X_train_pca):
            autoencoder = build_autoencoder(X_train_pca.shape[1], encoding_dim, regularizer_rate)
            autoencoder.fit(X_train_pca[train_index], X_train_pca[train_index],
                            epochs=50, batch_size=256, verbose=0,
                            validation_data=(X_train_pca[val_index], X_train_pca[val_index]))
            encoded_imgs = autoencoder.predict(X_train_pca[val_index])
            fold_score = mean_squared_error(X_train_pca[val_index], encoded_imgs)
            fold_scores.append(fold_score)

        score = np.mean(fold_scores)
        print(f'Encoding Dim: {encoding_dim}, Regularizer Rate: {regularizer_rate}, CV Score: {score}')

        if score < best_score:
            best_score = score
            best_params['encoding_dim'] = encoding_dim
            best_params['regularizer_rate'] = regularizer_rate

final_autoencoder = build_autoencoder(X_train_pca.shape[1],
                                     best_params['encoding_dim'],
                                     best_params['regularizer_rate'])
final_autoencoder.fit(X_train_pca, X_train_pca, epochs=50, batch_size=256, verbose=0)

X_test_pca_pred = final_autoencoder.predict(X_test_pca)

n = 10
plt.figure(figsize=(20, 4))
for i in range(n):
    ax = plt.subplot(2, n, i + 1)
    plt.imshow(X_test[i].reshape(64, 64), cmap='gray')
    ax.axis('off')

    ax = plt.subplot(2, n, i + 1 + n)
    plt.imshow(pca.inverse_transform(X_test_pca_pred[i]).reshape(64, 64), cmap='gray')
    ax.axis('off')
plt.tight_layout()
plt.show()











